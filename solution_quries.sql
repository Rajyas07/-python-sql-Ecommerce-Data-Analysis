--  List all unique cities where customers are located
select distinct customer_city from customers;
-- Count the number of orders placed in 2017.
select count(order_purchase_timestamp) as total from orders where year(order_purchase_timestamp)=2017;
-- Find the total sales per categry
SELECT UPPER(p.product_category) AS category,ROUND(SUM(pay.payment_value), 2) AS sales FROM products p JOIN order_items od ON p.product_id = od.product_id JOIN payments pay ON pay.order_id = od.order_id GROUP BY category order by sales desc ;
-- Calculate the percentage of orders that were paid in installments.
SELECT ((SUM(CASE WHEN payment_installments >= 1 THEN 1 ELSE 0 END)) / COUNT(*)) * 100 as percantage_installment FROM payments;
-- Count the number of customers from each state. 
select customer_state,count(distinct customer_id)as total_count from customers group by customer_state order by count(distinct customer_id) desc;
--  Calculate the number of orders per month in 2018
select monthname(order_purchase_timestamp) as months ,count(order_id) as count from orders where year(order_purchase_timestamp)=2018 group by months order by count desc;
-- Find the average number of products per order, grouped by customer city
WITH count_per_order AS (
    SELECT orders.order_id, orders.customer_id, COUNT(order_items.order_id) AS oc
    FROM orders 
    JOIN order_items ON orders.order_id = order_items.order_id
    GROUP BY orders.order_id, orders.customer_id
)
SELECT customers.customer_city, ROUND(AVG(count_per_order.oc), 2) AS average_orders
FROM customers 
JOIN count_per_order ON customers.customer_id = count_per_order.customer_id
GROUP BY customers.customer_city
ORDER BY average_orders DESC;
-- Sales percentage by category-- 
SELECT p.product_category ,round ((sum(pay.payment_value) )/(SELECT SUM(payment_value) FROM payments) * 100, 2) AS sales_percentage from payments pay join order_items o on pay.order_id = o.order_id join products p on o.product_id =p.product_id group by p.product_category order by sales_percentage desc; 
-- Identify the correlation between product price and the number of times a product has been purchased
select p.product_category,count(od.price) as count ,round(avg(od.price),2) as avg_price from products p inner join order_items od on p.product_id=od.product_id group by p.product_category order by count desc;
-- Calculate the total revenue generated by each seller, and rank them by revenue.
select * ,dense_rank() over(order by total_revenue desc) as ran_k from (select s.seller_id,round(sum(payment_value),2) as total_revenue from payments p inner join order_items od on p.order_id=od.order_id inner join sellers s on od.seller_id=s.seller_id group by seller_id )as a;

-- Calculate the moving average of order values for each customer over their order history
select order_id,order_purchase_timestamp,pay,avg(pay) over(partition by order_id order by order_purchase_timestamp rows between 2 preceding and current row) as mov_avg from (select od.order_id,od.order_purchase_timestamp,py.payment_value as pay from orders od inner join payments py on od.order_id=py.order_id) as a;
-- Calculate the cumulative sales per month for each year.
select * ,round(sum(paym) over (order by years ,months),2)as cumulitive_sales from (select year(od.order_purchase_timestamp) as years ,monthname(od.order_purchase_timestamp) as months,round(sum(pay.payment_value),2) as paym from orders od  inner join payments pay on od.order_id =pay.order_id group by years,months order by years, months desc) as a; 
 -- Calculate the year-over-year growth rate of total sales.
 with a as (select year(od.order_purchase_timestamp)as years, round(sum(pay.payment_value),3)as total_sales from orders od inner join payments pay on od.order_id=pay.order_id group by years order by years) 
 select * ,lag(total_sales,1) over (order by years) as previous_sale,round((((total_sales-lag(total_sales,1) over (order by years))/lag(total_sales,1) over (order by years))*100),3) as percentage from a ;
 -- Identify the top 3 customers who spent the most money in each year
 WITH ranked AS (
    SELECT 
        YEAR(od.order_purchase_timestamp) AS years,
        od.customer_id,
        round(SUM(pay.payment_value),2) AS money_spent,
        DENSE_RANK() OVER (
            PARTITION BY YEAR(od.order_purchase_timestamp) ORDER BY SUM(pay.payment_value) DESC) AS d_rank
    FROM orders od
    INNER JOIN payments pay ON od.order_id = pay.order_id GROUP BY YEAR(od.order_purchase_timestamp), od.customer_id
)
SELECT * FROM ranked WHERE d_rank <= 3 ORDER BY years, d_rank, money_spent DESC;
